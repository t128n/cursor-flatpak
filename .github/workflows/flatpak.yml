on:
  workflow_dispatch:
    inputs:
      force-build:
        type: boolean
        description: 'Force build even if versions match'
        required: false
        default: false
  schedule:
    - cron: '0 */12 * * *'
name: Cursor Flatpak
jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      cursor_version: ${{ steps.version-check.outputs.cursor_version }}
      flatpak_version: ${{ steps.version-check.outputs.flatpak_version }}
      needs_build: ${{ steps.version-check.outputs.needs_build }}
      cursor_download_url: ${{ steps.version-check.outputs.cursor_download_url }}
    steps:
      - name: Check if new Cursor version is available
        id: version-check
        run: |
          response=$(curl -s "https://www.cursor.com/api/download?platform=linux-x64&releaseTrack=stable")
          cursor_version_val=$(echo "$response" | jq -r '.version')
          cursor_download_url_val=$(echo "$response" | jq -r '.downloadUrl')
          echo "cursor_version=$cursor_version_val" >> $GITHUB_OUTPUT
          echo "cursor_download_url=$cursor_download_url_val" >> $GITHUB_OUTPUT

          response=$(curl -s "https://api.github.com/repos/t128n/cursor-flatpak/releases/latest")
          flatpak_version_val=$(echo "$response" | jq -r '.tag_name')
          echo "flatpak_version=$flatpak_version_val" >> $GITHUB_OUTPUT

          if [ "$cursor_version_val" == "$flatpak_version_val" ]; then
            echo "Cursor version $cursor_version_val matches Flatpak version $flatpak_version_val"
            echo "needs_build=false" >> $GITHUB_OUTPUT
          else
            echo "Cursor version $cursor_version_val does not match Flatpak version $flatpak_version_val"
            echo "needs_build=true" >> $GITHUB_OUTPUT
          fi

  prepare-appimage:
    needs: check-versions
    if: needs.check-versions.outputs.needs_build == 'true' || inputs.force-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Cursor AppImage
        run: |
          echo "Downloading Cursor from ${{ needs.check-versions.outputs.cursor_download_url }}..."
          mkdir -p /tmp
          curl -L -o /tmp/cursor.AppImage "${{ needs.check-versions.outputs.cursor_download_url }}"
      
      - name: Extract AppImage
        run: |
          chmod +x /tmp/cursor.AppImage
          /tmp/cursor.AppImage --appimage-extract 

          if [ ! -d "squashfs-root" ]; then
            echo "ERROR: squashfs-root directory DOES NOT exist after extraction attempt."
            exit 1
          fi

  build-flatpak:
    needs: [check-versions, prepare-appimage]
    if: needs.check-versions.outputs.needs_build == 'true' || inputs.force-build == 'true'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/flatter/gnome:master
      options: --privileged
    strategy:
      fail-fast: false
      max-parallel: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GPG
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build Flatpak
        uses: andyholmes/flatter@main
        with:
          files: com.cursor.Cursor.json
          gpg-sign: ${{ steps.gpg.outputs.fingerprint }}
          upload-bundles: true
          upload-pages-artifact: true
  
  deploy:
    needs: build-flatpak
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy Flatpak Repository
        uses: actions/deploy-pages@v4