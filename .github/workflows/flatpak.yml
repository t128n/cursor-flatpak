on:
  workflow_dispatch:
name: Cursor Flatpak
jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      cursor_version: ${{ steps.version-check.outputs.cursor_version }}
      flatpak_version: ${{ steps.version-check.outputs.flatpak_version }}
      needs_build: ${{ steps.version-check.outputs.needs_build }}
      cursor_download_url: ${{ steps.version-check.outputs.cursor_download_url }}
    steps:
      - name: Check if new Cursor version is available
        id: version-check
        run: |
          response=$(curl -s "https://www.cursor.com/api/download?platform=linux-x64&releaseTrack=stable")
          cursor_version_val=$(echo "$response" | jq -r '.version')
          cursor_download_url_val=$(echo "$response" | jq -r '.downloadUrl')
          echo "cursor_version=$cursor_version_val" >> $GITHUB_OUTPUT
          echo "cursor_download_url=$cursor_download_url_val" >> $GITHUB_OUTPUT

          response=$(curl -s "https://api.github.com/repos/t128n/cursor-flatpak/releases/latest")
          flatpak_version_val=$(echo "$response" | jq -r '.tag_name')
          echo "flatpak_version=$flatpak_version_val" >> $GITHUB_OUTPUT

          if [ "$cursor_version_val" == "$flatpak_version_val" ]; then
            echo "Cursor version $cursor_version_val matches Flatpak version $flatpak_version_val"
            echo "needs_build=false" >> $GITHUB_OUTPUT
          else
            echo "Cursor version $cursor_version_val does not match Flatpak version $flatpak_version_val"
            echo "needs_build=true" >> $GITHUB_OUTPUT
          fi

  download-appimage:
    needs: check-versions
    if: needs.check-versions.outputs.needs_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Cursor AppImage
        run: |
          echo "Downloading Cursor from ${{ needs.check-versions.outputs.cursor_download_url }}..."
          mkdir -p /tmp
          curl -L -o /tmp/cursor.AppImage "${{ needs.check-versions.outputs.cursor_download_url }}"
      
      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cursor-appimage
          path: /tmp/cursor.AppImage
          retention-days: 1

  build-flatpak:
    needs: [check-versions, download-appimage]
    if: needs.check-versions.outputs.needs_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:freedesktop-23.08
      options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          
      - name: Download AppImage artifact
        uses: actions/download-artifact@v4
        with:
          name: cursor-appimage
          path: /tmp

      - name: Extract AppImage and list contents
        run: |
          chmod +x /tmp/cursor.AppImage
          /tmp/cursor.AppImage --appimage-extract 

          if [ ! -d "squashfs-root" ]; then
            echo "ERROR: squashfs-root directory DOES NOT exist after extraction attempt."
            exit 1
          fi
          
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          manifest-path: com.cursor.Cursor.json
          cache-key: flatpak-builder-${{ github.sha }}
          branch: stable
          
  create-release:
    needs: [check-versions, build-flatpak]
    if: needs.check-versions.outputs.needs_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Flatpak artifact
        uses: actions/download-artifact@v4
        with:
          name: app-x86_64.flatpak
          path: ./
          
      - name: Rename Flatpak artifact
        run: |
          mv app-x86_64.flatpak com.cursor.Cursor-${{ needs.check-versions.outputs.cursor_version }}.flatpak

      - name: Create GitHub Release with gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -la
          gh release create "${{ needs.check-versions.outputs.cursor_version }}" \
            --title "Cursor ${{ needs.check-versions.outputs.cursor_version }}" \
            --notes "Cursor ${{ needs.check-versions.outputs.cursor_version }} packaged as Flatpak. Automatically generated by GitHub Actions." \
            ./com.cursor.Cursor-${{ needs.check-versions.outputs.cursor_version }}.flatpak
